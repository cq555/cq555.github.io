<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>express</title>
    <url>/2020/09/29/express/</url>
    <content><![CDATA[<h3 id="可以使服务器跨域"><a href="#可以使服务器跨域" class="headerlink" title="可以使服务器跨域"></a>可以使服务器跨域</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app.all(&quot;*&quot;,function(req,res,next)&#123;</span><br><span class="line">	&#x2F;&#x2F;设置允许跨域的域名，*代表允许任意域名跨域</span><br><span class="line">	res.header(&quot;Access-Control-Allow-Origin&quot;,req.headers.origin||&#39;*&#39;);</span><br><span class="line">	&#x2F;&#x2F;允许的header类型</span><br><span class="line">	res.header(&quot;Access-Control-Allow-Headers&quot;,&quot;Content-Type,Authorization,X-Requested-With&quot;);</span><br><span class="line">	&#x2F;&#x2F;	&#x2F;&#x2F;跨域允许的请求方式</span><br><span class="line">	res.header(&quot;Access-Control-Allow-Methods&quot;,&quot;PUT,POST,GET,DELETE,OPTIONS&quot;);</span><br><span class="line">	&#x2F;&#x2F;	可以带cookies</span><br><span class="line">	res.header(&quot;Access-Control-Allow-Credentials&quot;,true);</span><br><span class="line">	if(req.method&#x3D;&#x3D;&#39;OPTIONS&#39;)&#123;</span><br><span class="line">	res.sendStatus(200);</span><br><span class="line">	&#125;else&#123;</span><br><span class="line">	next();</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/09/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==">Hexo</span>! This is your very first post. Check <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=">troubleshooting</span> or you can ask me on <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==">GitHub</span>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s">Writing</span></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=">Server</span></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s">Generating</span></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s">Deployment</span></p>
]]></content>
  </entry>
  <entry>
    <title>redux</title>
    <url>/2020/09/29/redux/</url>
    <content><![CDATA[<h3 id="REDUX"><a href="#REDUX" class="headerlink" title="REDUX"></a>REDUX</h3><p>1、redux是一个全局状态管理工具。他可以个任何一个框架进行结合使用，不一定是react。但是react主要是针对视图层操作的，用来展示内容的，和redux结合使用会更方便一些。</p>
<p>2、单向数据流：数据是单向流动的。我们在view中通过dispatch派发一个action来改变数据，数据改变之后视图重新渲染</p>
<p>3、Redux中：<br>(1)state：是用来存储数据的<br>(2)action：是用来组织数据的，每一个action都必须包含一个type属性，表示数据以什么            形式进行改变。action是一个简单的对象。如果我们要改变数据只能通过                dispatch派发一个action实现<br>(3)reducer：用来改变state，所有的数据改变都需要在reducer中进行。是一个function，            接收两个参数<br>参数一 state的初始值<br>参数二 action<br>需要有一个返回值表示新的state数据</p>
<p>4、createStore用来创建redux<br>combineReducers可以把多个reducer合并成一个<br>Import {createStore,combineReducers,compose,applyMiddleware} from “redux”;<br>5、dispatch</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dispatch（）&#123;</span><br><span class="line">type:</span><br><span class="line">payload:&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当我们使用了redux-thunk插件之后<br> 插件会判断当前我们dispatch派发的内容<br> 如果是一个对象  直接进行dispatch<br>    如果不是，name会把dispatch当做参数传递到function颞部执行<br>    执行完成之后再在function中进行派发<br>  redux-thunk的代码只有几十行<br>dispatch派发一个action<br> 执行dispatch之后所有的reducer都会执行一遍<br> 根据当前的action中的type属性判断是如何改变state数据</p>
<p>6、connect的作用是吧redux中的数据映射到组件的属性上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; connect &#125; from &quot;react-redux&quot;;</span><br></pre></td></tr></table></figure>
<p>connect是一个高阶组件的应用形式<br>  通过connect方法可以把redux中的state映射到组件的属性上<br>  同时还会吧dispatch方法映射到属性上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default connect(mapStateToProps)(App);</span><br></pre></td></tr></table></figure>

<p>7、解决异步action的问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import thunk from &quot;redux-thunk&quot;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习</category>
      </categories>
  </entry>
  <entry>
    <title>react</title>
    <url>/2020/09/29/react/</url>
    <content><![CDATA[<h3 id="REACT"><a href="#REACT" class="headerlink" title="REACT"></a>REACT</h3><p>react 是一个针对视图层的库，使用的是 jsx 语法<br>jsx 语法是一种在 js 中写 html 代码的语法，需要使用 babel 插件做解析<br><span class="exturl" data-url="aHR0cHM6Ly9yZWFjdGpzLm9yZy8=">https://reactjs.org/</span> 官网<br><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9yZWFjdC9yZWFjdC10dXRvcmlhbC5odG1s">https://www.runoob.com/react/react-tutorial.html</span> 菜鸟教程</p>
<h4 id="class-定义的组件和-function-定义组件的区别"><a href="#class-定义的组件和-function-定义组件的区别" class="headerlink" title="class 定义的组件和 function 定义组件的区别"></a>class 定义的组件和 function 定义组件的区别</h4><p>（1）在 16.8 之前的 react 中 funciton 定义的组件不能拥有局部状态和生命周期，是一种无状态组件<br>（2）16.8 之后的 react 中新增了 hooks 可以在 function 定义的组件中模拟局部状态和生命周期<br>（3）function 定义的组件没有 this 执行问题，代码可读性更强<br>（4）class 定义的组件写法上更接近于强类型语言的语法<br>（5）class 定义的组件中有很多的生命周期钩子函数，<br>（6）function 定义的组件通过 useEffect 副作用来模拟处理生命周期</p>
<h4 id="把一个数组循环展示"><a href="#把一个数组循环展示" class="headerlink" title="把一个数组循环展示"></a>把一个数组循环展示</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;list.map((item,index)&#x3D;&gt;&#123;</span><br><span class="line">return (</span><br><span class="line">&lt;p className&#x3D;””  key&#x3D;&#123;index&#125;&gt;&#123;item&#125;&lt;&#x2F;p&gt;</span><br><span class="line">)</span><br><span class="line">&#125;)&#125;</span><br></pre></td></tr></table></figure>
<h4 id="function-定义的组件中"><a href="#function-定义的组件中" class="headerlink" title="function 定义的组件中"></a>function 定义的组件中</h4><p>需要写 const [list , setList] = React.useState([{id: 1, content: “起床”}])<br>然后在方法中写 setList（） 写了之后当 state 数据发生改变之后组件会重新渲染</p>
<h4 id="组件传参"><a href="#组件传参" class="headerlink" title="组件传参"></a>组件传参</h4><p>（1）父传子 使用 props<br>（2）子传父使用 方法调用<br>useEffect 副作用<br>就是我们做了什么操作之后会引起一些其他的反应<br>参数一 是一个回调函数<br>参数二 表示哪些数据的改变会引起前面回调函数的处理，数组中的任何一项发生改变都会引起回调函数执行<br>如果第二个参数是空数组    那么只有在组件初始化的时候执行一次</p>
<h4 id="class-定义组件时的-this-指向"><a href="#class-定义组件时的-this-指向" class="headerlink" title="class 定义组件时的 this 指向"></a>class 定义组件时的 this 指向</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">（1） this.clickHandle &#x3D; this.clickHandle.bind(this);&#x2F;&#x2F;改变 this 指向</span><br><span class="line">这种绑定 this 指向的方法是官方推荐写法</span><br><span class="line">组件初始化的时候只会做一次绑定</span><br><span class="line">（2）return &lt;button onClick&#x3D;&#123;this.clickHandle.bind(this)&#125;&gt;&#123;this.state.count&#125;&lt;&#x2F;button&gt;</span><br><span class="line">直接在render的时候执行this绑定</span><br><span class="line">		每一次数据或者属性改变之后this指向绑定的操作都会执行</span><br><span class="line">（3）箭头函数</span><br><span class="line">&lt;button onClick&#x3D;&#123;() &#x3D;&gt; this.clickHandle()&#125;&gt;&#123;this.state.count&#125;&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>

<h4 id="通过-extends-继承在-Component-实现一个组件"><a href="#通过-extends-继承在-Component-实现一个组件" class="headerlink" title="通过 extends 继承在 Component 实现一个组件"></a>通过 extends 继承在 Component 实现一个组件</h4><p>每一个组件都需要有一个 render<br>此方法返回的是当前组件显示的内容</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
  </entry>
  <entry>
    <title>VUE知识点</title>
    <url>/2020/09/28/vueapp/</url>
    <content><![CDATA[<h3 id="VUE中几个单词的作用"><a href="#VUE中几个单词的作用" class="headerlink" title="VUE中几个单词的作用"></a>VUE中几个单词的作用</h3><p>（1）methods:{} 里面写的是方法  调用的时候直接就触发<br>（2）computed:{} 计算属性  里写的是监听某个值改变了然后改变了页面  只有监听的值改变了才触发<br>（3）components:{} 里写的是创建的组件的名字<br>（4）prpos:父组件传给子组件时用的属性</p>
<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">beforeCreate</span></span>()&#123;</span><br><span class="line">console.log(<span class="string">&#x27;组件创建之前&#x27;</span>);</span><br><span class="line">&#125;,</span><br><span class="line">使用最多的一个钩子函数，用来获取数据</span><br><span class="line"><span class="function"><span class="title">created</span></span>() &#123;</span><br><span class="line">console.log(<span class="string">&#x27;组件创建完成&#x27;</span>);</span><br><span class="line">这里用来引用插件</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">beforeMount</span></span>() &#123;</span><br><span class="line">console.log(<span class="string">&#x27;组件挂载之前，把html节点内容进行解析&#x27;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">mounted</span></span>() &#123;</span><br><span class="line">console.log(<span class="string">&#x27;组件挂载完成，把html节点内容解析完成，此处可以获取组件的dom元素&#x27;</span>);</span><br><span class="line"><span class="variable">$el</span>  可以获取当前组件中的dom元</span><br><span class="line"> console.log(this.<span class="variable">$el</span>.style.color = <span class="string">&#x27;red&#x27;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"> 更新的两个函数会重复执行，更新的时候不能改变数据，不然会出现死循环</span><br><span class="line"><span class="function"><span class="title">beforeUpdate</span></span>() &#123;</span><br><span class="line">console.log(<span class="string">&#x27;组件更新之前， 当前属性和data数据发生改变的时候进行&#x27;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">updated</span></span>() &#123;</span><br><span class="line">console.log(<span class="string">&#x27;组件更新完成&#x27;</span>);</span><br><span class="line">// this.num++  死循环</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">beforeDestroy</span></span>() &#123;</span><br><span class="line">console.log(<span class="string">&#x27;组件销毁之前&#x27;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">destroyed</span></span>() &#123;</span><br><span class="line">console.log(<span class="string">&#x27;组件销毁完成&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>①父传子 （使用属性）<br>   从外往内传，使用props属性<br>   在子元素中建一个props<br>②子传父（使用事件派发）<br>   $on    vue中的事件监听<br>   $emit   vue中的事件派发<br>③组件与组件之间传参<br>新建一个  const $eventBus = new Vue();<br>this.$eventBus.$emit(“coolectMovies”, c);  派发<br> this.$eventBus.$on(“coolectMovies”,c)     接收</p>
<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>*请求加载图片</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;meta name=<span class="string">&quot;referrer&quot;</span> content=<span class="string">&quot;no-referrer&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>
<p>  请求资源时不把我的当前的主机信息传递给服务器<br>vue是一个前端渐进式的mvvm开发框架。<br>mvvm是一种开发模式，分为三块内容:model view view-model<br>model是用来存储数据的<br>view是用来展示数据的<br>view-model是视图模型层，用来对数据和视图进行双向绑定的<br>（1）v-model（可以加修饰符）<br>作用是把data中的数据和html页面中的form表单项做关联<br>v-model.trim  去空格<br>（2）事件绑定使用@或者v-on<br>@keyup=“事件名或操作” 键盘按下事件（keyCode来判断按得是哪个）<br>@clicck=“事件名或操作”<br>按键修饰符<br>@keyup.enter表示按下回车<br>@keyup.ctrl.enter表示ctrl+回车<br>@keyup.alt.enter表示alt+回车<br>（3）v-for<br>循环每一项在页面中进行显示。可以循环数组，字符串，数字，对象<br>v-for=”item in people” :key=””<br>“ : ”v-bind的简写  绑定数据,每一个循环项目都需要一个唯一的key，作用是性能优化<br>（4）v-if/v-show<br>控制标签的显示和隐藏<br>v-show指令接收一个bool值true/false<br>v-if  是直接删除标签，不在页面中心事了（可以直接销毁组件）<br>v-show 是控制标签的display属性进行显示和隐藏<br>相对来说 v-show 的性能更高一些<br>（5）methods<br>在vue实例中可以访问到的自定义方法都写在这个属性中<br>methods中的方法可以相互调用，也能直接访问data中的数据，需要加上this关键字<br>（6）v-html  绑定一个富文本标签  （富文本编辑器：wangEditor,ueditor,kindeditor）<br>富文本    包含有html标签的字符串文本内容<br>管理后台 ？   是对所有系统中的数据做管理<br>服务器端开发？ java、php、c#、python、ruby、nodejs等<br>调用服务器的一些资源，操作数据库存取数据，写接口，写页面<br>管理后台又叫管理系统，是一个web系统或者一个桌面系统<br>是由开发人员制作的，服务器端开发知识管理后台中的一部分而已<br>还需要前端<br>管理后台可以对系统的数据和用户会员信息做管理，管理后台是个企业内部使用的<br>（7）watch<br>监听一个数据的改变，触发一些列的操作。一个影响多个<br>（8）computed<br>多个影响一个</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
  </entry>
  <entry>
    <title>美好的一天</title>
    <url>/2020/10/09/%E7%BE%8E%E5%A5%BD%E7%9A%84%E4%B8%80%E5%A4%A9/</url>
    <content><![CDATA[<h4 id="Love-is-to-put-others-more-important-than-yourself"><a href="#Love-is-to-put-others-more-important-than-yourself" class="headerlink" title="Love is to put others more important than yourself."></a>Love is to put others more important than yourself.</h4>]]></content>
      <categories>
        <category>心情</category>
      </categories>
  </entry>
</search>
